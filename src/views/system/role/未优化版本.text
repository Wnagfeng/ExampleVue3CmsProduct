<template>
    <div class="userWrapper">
        <div class="header">
            <el-form :inline="true" :model="queryParams" class="demo-form-inline">
                <el-form-item label="角色名">
                    <el-input v-model="queryParams.name" placeholder="角色名"></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" @click="handleQuery">查询</el-button>
                </el-form-item>
            </el-form>
            <div class="actions">
                <el-button type="success" @click="handleImport" class="action_btn">
                    <el-icon>
                        <Top />
                    </el-icon>
                    <div class="tex">导入</div>
                </el-button>
                <el-button type="success" @click="handleCreate" class="action_btn">
                    <el-icon>
                        <EditPen />
                    </el-icon>
                    <div class="tex">新建</div>
                </el-button>
                <el-button type="warning" @click="handleExport" class="action_btn">
                    <el-icon>
                        <Bottom />
                    </el-icon>
                    <div class="tex">导出</div>
                </el-button>
                <el-button type="info" @click="handlePrint" class="action_btn">
                    <el-icon>
                        <Tickets />
                    </el-icon>
                    <div class="tex">打印</div>
                </el-button>
            </div>
        </div>
        <div class="body">
            <el-table :data="RoleList" border fit style="width: 100%">
                <el-table-column prop="id" label="Id" min-width="60" align="center" />
                <el-table-column prop="name" label="角色名" min-width="150" align="center" flex="1" />
                <el-table-column prop="intro" label="介绍" min-width="150" align="center" flex="1" />
                <el-table-column prop="created_at" label="创建时间" min-width="170" align="center" flex="1">
                    <template #default="scope">
                        {{ formatUtcString(scope.row.createAt) }}
                    </template>
                </el-table-column>
                <el-table-column prop="updated_at" label="修改时间" min-width="170" align="center" flex="1">
                    <template #default="scope">
                        {{ formatUtcString(scope.row.updateAt) }}
                    </template>
                </el-table-column>
                <el-table-column align="center" label="操作" width="165px">
                    <template #default="scope">
                        <el-button type="success" plain @click="EditUserData(scope.row)">
                            编辑
                        </el-button>
                        <el-button type="danger" plain @click="deleteClick(scope.row.id)">
                            删除
                        </el-button>
                    </template>
                </el-table-column>
            </el-table>
        </div>
        <div class="footer">
            <el-pagination v-model:current-page="currentPage" v-model:page-size="pageSize" :page-sizes="[10, 20, 30]"
                layout="total, sizes, prev, pager, next, jumper" :total="totalCount" @size-change="handleSizeChange"
                @current-change="handleCurrentChange" />
        </div>
        <el-dialog v-model="centerDialogVisible" :title="isCreate ? '新建角色' : '编辑角色'" width="30%" center>
            <div class="form">
                <el-form :model="formData" label-width="80px" size="large">
                    <el-form-item label="角色名称" prop="name">
                        <el-input v-model="formData.name" placeholder="请输入用户名" />
                    </el-form-item>
                    <el-form-item label="权限介绍" prop="realname">
                        <el-input v-model="formData.intro" placeholder="请输入真实姓名" />
                    </el-form-item>

                    <el-form-item label="权限分配" prop="roleId">
                        <el-tree ref="treeRef" :data="MenuListData" show-checkbox node-key="id" highlight-current
                            :props="{
                                children: 'children',
                                label: 'name'
                            }" @check="handlCheckClick" />
                    </el-form-item>
                </el-form>
            </div>
            <template #footer>
                <span class="dialog-footer">
                    <el-button @click="centerDialogVisible = false">取消</el-button>
                    <el-button type="primary" @click="entercenterDialogVisible">
                        确定
                    </el-button>
                </span>
            </template>
        </el-dialog>
    </div>
</template>

<script setup lang="ts">
import { storeToRefs } from 'pinia'
import { ref, onMounted, nextTick } from 'vue'
import { ElMessage } from 'element-plus';
import 'element-plus/es/components/message/style/css'
import { Top, Bottom, Tickets, EditPen } from '@element-plus/icons-vue'
import { useRoleStore } from '@/stores/role'
import { formatUtcString } from '@/utils/Fomart-Data-Time'
const RoleStore = useRoleStore()
const centerDialogVisible = ref(false)
const isCreate = ref(false)
const EditUserID = ref(0)

const treeRef = ref<any>()
let CheckMenuListIds: any = ref([])
interface IformData {
    name: string
    intro: string

}
const formData = ref<IformData>({
    name: '',
    intro: '',

})
const currentPage = ref(1)
const pageSize = ref(10)
RoleStore.$onAction(({ name, after }) => {
    after(() => {
        if (
            name == 'DeleteRole' ||
            name == 'FetchPatchAndCreateRole'
        ) {
            currentPage.value = 1
        }
    })
})
const queryParams = ref({
    name: ''
})
const Querydata = {
    offset: (currentPage.value - 1) * pageSize.value,
    size: pageSize.value,
    name: '',
}
const { totalCount, RoleList, MenuListData, RoleMenulist } = storeToRefs(RoleStore)

onMounted(() => {
    RoleStore.FetchGetRoleList()
    RoleStore.FetchGetMenuList()
    // RoleStore.FetchGetUserList(Querydata)
    // userStore.FetchGetRoleList()
    // userStore.FetchGetDepartmentList()
})

const EditUserData = async (row: any) => {
    isCreate.value = false
    centerDialogVisible.value = true
    treeRef?.value?.setCheckedKeys([])
    const Roleid = row.id
    formData.value = {
        name: row.name,
        intro: row.intro,
    }
    const RoleMenuList = await RoleStore.FetchGetRoleForId(Roleid)
    const res = mapmenulisttoIds(RoleMenuList)
    nextTick(() => {
        treeRef?.value?.setCheckedKeys(res)
    })
}
function mapmenulisttoIds(menuList: any[]) {
    const idS: number[] = []
    function mapidtoids(menus: any[]) {
        for (const item of menus) {
            // 如果当前的这段数据中有children就在调用一次这个函数
            if (item.children) {
                mapidtoids(item.children)
            } else {
                // 如果不存在就给我添加
                idS.push(item.id)
            }
        }
    }
    mapidtoids(menuList)
    return idS
}
const deleteClick = (id: number) => {
    RoleStore.DeleteRole(id)

}
function handlCheckClick(data1: any, data2: any) {
    let menuList = [...data2.checkedKeys, ...data2.halfCheckedKeys]
    CheckMenuListIds.value = menuList
}


const handleSizeChange = (size: number) => {
    pageSize.value = size;
    Querydata.offset = (currentPage.value - 1) * pageSize.value;
    Querydata.size = pageSize.value;

    RoleStore.FetchGetRoleList(Querydata)
};

const handleCurrentChange = (page: number) => {
    currentPage.value = page;
    Querydata.offset = (currentPage.value - 1) * pageSize.value;
    Querydata.size = pageSize.value;
    RoleStore.FetchGetRoleList(Querydata)
};
const handleQuery = () => {
    if (queryParams.value.name === '') {
        ElMessage({
            showClose: true,
            message: '请输入查询条件',
            type: 'warning',
        })
        return
    }
    Querydata.name = queryParams.value.name
    RoleStore.FetchGetRoleList(Querydata)
    if (RoleList.value.length > 0) {
        ElMessage({
            showClose: true,
            message: '查询成功',
            type: 'success',
        })
    }
}

const handleImport = () => {
    console.log('Import button clicked')
    // 导入功能的实现
}
const handleCreate = () => {
    isCreate.value = true
    centerDialogVisible.value = true
    nextTick(() => {
        treeRef?.value?.setCheckedKeys([])
    })
    formData.value = {
        name: '',
        intro: ''
    }

}

const handleExport = () => {
    console.log('Export button clicked')
    // 导出功能的实现
}

const handlePrint = () => {
    console.log('Print button clicked')
    // 打印功能的实现
}
const entercenterDialogVisible = () => {
    if (isCreate.value) {
        const RoleData = {
            name: formData.value.name,
            intro: formData.value.intro,
            menuList: CheckMenuListIds.value,
        }
        RoleStore.FetchPatchAndCreateRole(RoleData)
    } else {
        const RoleData = {
            name: formData.value.name,
            intro: formData.value.intro,
            menuList: CheckMenuListIds.value,
        }
        RoleStore.FetchPatchAndCreateRole(RoleData)
    }
    centerDialogVisible.value = false
}
</script>

<style scoped lang="less">
.userWrapper {
    padding: 20px;
}

.el-table {
    width: 100%;
}

.footer {
    margin-top: 20px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.header {
    width: 100%;
    height: 70px;
    display: flex;
    justify-content: flex-end;
    align-items: center;


    .actions {
        margin-top: -18px;

        .tex {
            margin-left: 5px;
        }
    }
}
</style>